name: 'Build and Deploy to GKE - PROD'

on:
  push:
    branches: ["main"]

env:
  MODULE: 'waiting-service'
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  EMAIL: ${{ secrets.SA_EMAIL }}
  GAR_LOCATION: 'asia-northeast1'
  GKE_CLUSTER: 'test-cluster'
  GKE_ZONE: 'asia-northeast1-a'
  DEPLOYMENT_NAME: 'prod-waiting-service'
  REPOSITORY: 'waiting-service-repo'
  IMAGE: 'pjh612/waiting-system'
  WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GKE_WORKLOAD_IDENTITY_PROVIDER }}
  PROFILE: 'prod'


jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          project_id: '${{ env.PROJECT_ID }}'
          service_account: '${{ env.EMAIL }}'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: 'Docker Auth'
        uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'
          project_id: '${{ env.PROJECT_ID }}'

      # Build the Docker image
      - name: 'Build and push Docker container'
        run: |-
          gcloud auth configure-docker ${GAR_LOCATION}-docker.pkg.dev
          
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"
          
          ./gradlew ${{ env.MODULE }}:jibDockerBuild \
          -Dimage="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}" \
          -Dtags=${GITHUB_SHA}
          
          docker push "${DOCKER_TAG}"

      # Set up kustomize
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1


      # Deploy the Docker image to the GKE cluster
      - name: 'Deploy to GKE'
        run: |-
          cd overlays/${{ env.PROFILE }}
          export IMAGE_NAME=${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}
          envsubst < kustomization.yaml > kustomization.tmp && mv kustomization.tmp kustomization.yaml
          cat ./kustomization.yaml
          kustomize build .
          kubectl apply -k .
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n ${{ env.PROFILE }}
          kubectl get services -o wide -n ${{ env.PROFILE }}
